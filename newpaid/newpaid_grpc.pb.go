// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: newpaid/newpaid.proto

package newpaid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NewPaidService_AddMoney_FullMethodName = "/newpaid.NewPaidService/AddMoney"
	NewPaidService_GetMoney_FullMethodName = "/newpaid.NewPaidService/GetMoney"
)

// NewPaidServiceClient is the client API for NewPaidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewPaidServiceClient interface {
	AddMoney(ctx context.Context, in *AddMoneyRequest, opts ...grpc.CallOption) (*AddMoneyResponse, error)
	GetMoney(ctx context.Context, in *GetMoneyRequest, opts ...grpc.CallOption) (*GetMoneyResponse, error)
}

type newPaidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewPaidServiceClient(cc grpc.ClientConnInterface) NewPaidServiceClient {
	return &newPaidServiceClient{cc}
}

func (c *newPaidServiceClient) AddMoney(ctx context.Context, in *AddMoneyRequest, opts ...grpc.CallOption) (*AddMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMoneyResponse)
	err := c.cc.Invoke(ctx, NewPaidService_AddMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newPaidServiceClient) GetMoney(ctx context.Context, in *GetMoneyRequest, opts ...grpc.CallOption) (*GetMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMoneyResponse)
	err := c.cc.Invoke(ctx, NewPaidService_GetMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewPaidServiceServer is the server API for NewPaidService service.
// All implementations must embed UnimplementedNewPaidServiceServer
// for forward compatibility.
type NewPaidServiceServer interface {
	AddMoney(context.Context, *AddMoneyRequest) (*AddMoneyResponse, error)
	GetMoney(context.Context, *GetMoneyRequest) (*GetMoneyResponse, error)
	mustEmbedUnimplementedNewPaidServiceServer()
}

// UnimplementedNewPaidServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNewPaidServiceServer struct{}

func (UnimplementedNewPaidServiceServer) AddMoney(context.Context, *AddMoneyRequest) (*AddMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMoney not implemented")
}
func (UnimplementedNewPaidServiceServer) GetMoney(context.Context, *GetMoneyRequest) (*GetMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoney not implemented")
}
func (UnimplementedNewPaidServiceServer) mustEmbedUnimplementedNewPaidServiceServer() {}
func (UnimplementedNewPaidServiceServer) testEmbeddedByValue()                        {}

// UnsafeNewPaidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewPaidServiceServer will
// result in compilation errors.
type UnsafeNewPaidServiceServer interface {
	mustEmbedUnimplementedNewPaidServiceServer()
}

func RegisterNewPaidServiceServer(s grpc.ServiceRegistrar, srv NewPaidServiceServer) {
	// If the following call pancis, it indicates UnimplementedNewPaidServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NewPaidService_ServiceDesc, srv)
}

func _NewPaidService_AddMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPaidServiceServer).AddMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewPaidService_AddMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPaidServiceServer).AddMoney(ctx, req.(*AddMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewPaidService_GetMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewPaidServiceServer).GetMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewPaidService_GetMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewPaidServiceServer).GetMoney(ctx, req.(*GetMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewPaidService_ServiceDesc is the grpc.ServiceDesc for NewPaidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewPaidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "newpaid.NewPaidService",
	HandlerType: (*NewPaidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMoney",
			Handler:    _NewPaidService_AddMoney_Handler,
		},
		{
			MethodName: "GetMoney",
			Handler:    _NewPaidService_GetMoney_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "newpaid/newpaid.proto",
}
